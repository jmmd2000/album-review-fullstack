import { ExtractedColor } from "@shared/types";
import { useMemo } from "react";

/**
 * The props for the BlurryHeader component.
 */
interface BlobBackgroundProps {
  /*** The colors to use for the blobs */
  _colors?: ExtractedColor[];
  /*** The children to render on top of the blobs */
  children?: React.ReactNode;
}

/**
 *
 * The blobs are randomly generated on mount and have different sizes, colors, and animations.
 * They are created using div elements with a blur filter and a random size, color, and position.
 * The blobs are either generated by the extract-colors package or are chosen by the user.
 */

/**
 * This component creates a header with a blurry background effect using blobs.
 * @param {ExtractedColor[] | undefined} colors The colors to use for the blobs, defaults to black
 * @param {React.ReactNode} children The children to render on top of the blobs
 */
const BlurryHeader = ({ _colors, children }: BlobBackgroundProps) => {
  const defaultColors: ExtractedColor[] = [{ hex: "#00ffff" }];
  const colors = _colors && _colors.length > 0 ? _colors : defaultColors;

  // Total number of blobs
  const totalBlobs = 80;
  const colorCount = colors.length;

  // Generate blobs with proportional color distribution
  const blobs = useMemo(() => {
    const blobsArray = [];

    for (let i = 0; i < colorCount; i++) {
      const blobCount = Math.round((totalBlobs / colorCount) * (colorCount - i));
      for (let j = 0; j < blobCount; j++) {
        blobsArray.push({
          size: Math.floor(Math.random() * 300) + 300,
          left: Math.random() * 70,
          top: Math.random() * 30,
          color: colors[i].hex,
          blur: Math.floor(Math.random() * 60) + 60,
          opacity: Math.random() * 0.5 + 0.5,
          animationClass: `animate-lava${j % 3}`,
        });
      }
    }

    // Shuffle blobs to randomize layering
    for (let i = blobsArray.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [blobsArray[i], blobsArray[j]] = [blobsArray[j], blobsArray[i]];
    }

    return blobsArray;
  }, [colorCount, colors]);

  return (
    <div className="relative w-full h-[600px] md:h-[500px] pb-28 overflow-hidden bg-gradient-to-b from-black/0 via-neutral-900/10 to-neutral-900">
      {blobs.map((blob, index) => (
        <div
          key={index}
          className={`absolute rounded-full -z-[5] ${blob.animationClass}`}
          style={{
            width: `${blob.size}px`,
            height: `${blob.size}px`,
            position: "absolute",
            top: `${blob.top}%`,
            left: `${blob.left}%`,
            transform: "translate(-50%, -50%)",
            filter: `blur(${blob.blur}px)`,
            opacity: blob.opacity,
            backgroundColor: blob.color,
            willChange: "transform, opacity, filter",
          }}
        ></div>
      ))}

      {children}
    </div>
  );
};

export default BlurryHeader;
