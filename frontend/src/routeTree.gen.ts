/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as StatsIndexRouteImport } from './routes/stats/index'
import { Route as SettingsIndexRouteImport } from './routes/settings/index'
import { Route as SearchIndexRouteImport } from './routes/search/index'
import { Route as BookmarksIndexRouteImport } from './routes/bookmarks/index'
import { Route as ArtistsIndexRouteImport } from './routes/artists/index'
import { Route as AlbumsIndexRouteImport } from './routes/albums/index'
import { Route as ArtistsArtistIDIndexRouteImport } from './routes/artists/$artistID/index'
import { Route as AlbumsAlbumIDIndexRouteImport } from './routes/albums/$albumID/index'
import { Route as AlbumsAlbumIDEditRouteImport } from './routes/albums/$albumID/edit'
import { Route as AlbumsAlbumIDCreateRouteImport } from './routes/albums/$albumID/create'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const StatsIndexRoute = StatsIndexRouteImport.update({
  id: '/stats/',
  path: '/stats/',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsIndexRoute = SettingsIndexRouteImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => rootRouteImport,
} as any)
const SearchIndexRoute = SearchIndexRouteImport.update({
  id: '/search/',
  path: '/search/',
  getParentRoute: () => rootRouteImport,
} as any)
const BookmarksIndexRoute = BookmarksIndexRouteImport.update({
  id: '/bookmarks/',
  path: '/bookmarks/',
  getParentRoute: () => rootRouteImport,
} as any)
const ArtistsIndexRoute = ArtistsIndexRouteImport.update({
  id: '/artists/',
  path: '/artists/',
  getParentRoute: () => rootRouteImport,
} as any)
const AlbumsIndexRoute = AlbumsIndexRouteImport.update({
  id: '/albums/',
  path: '/albums/',
  getParentRoute: () => rootRouteImport,
} as any)
const ArtistsArtistIDIndexRoute = ArtistsArtistIDIndexRouteImport.update({
  id: '/artists/$artistID/',
  path: '/artists/$artistID/',
  getParentRoute: () => rootRouteImport,
} as any)
const AlbumsAlbumIDIndexRoute = AlbumsAlbumIDIndexRouteImport.update({
  id: '/albums/$albumID/',
  path: '/albums/$albumID/',
  getParentRoute: () => rootRouteImport,
} as any)
const AlbumsAlbumIDEditRoute = AlbumsAlbumIDEditRouteImport.update({
  id: '/albums/$albumID/edit',
  path: '/albums/$albumID/edit',
  getParentRoute: () => rootRouteImport,
} as any)
const AlbumsAlbumIDCreateRoute = AlbumsAlbumIDCreateRouteImport.update({
  id: '/albums/$albumID/create',
  path: '/albums/$albumID/create',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/albums': typeof AlbumsIndexRoute
  '/artists': typeof ArtistsIndexRoute
  '/bookmarks': typeof BookmarksIndexRoute
  '/search': typeof SearchIndexRoute
  '/settings': typeof SettingsIndexRoute
  '/stats': typeof StatsIndexRoute
  '/albums/$albumID/create': typeof AlbumsAlbumIDCreateRoute
  '/albums/$albumID/edit': typeof AlbumsAlbumIDEditRoute
  '/albums/$albumID': typeof AlbumsAlbumIDIndexRoute
  '/artists/$artistID': typeof ArtistsArtistIDIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/albums': typeof AlbumsIndexRoute
  '/artists': typeof ArtistsIndexRoute
  '/bookmarks': typeof BookmarksIndexRoute
  '/search': typeof SearchIndexRoute
  '/settings': typeof SettingsIndexRoute
  '/stats': typeof StatsIndexRoute
  '/albums/$albumID/create': typeof AlbumsAlbumIDCreateRoute
  '/albums/$albumID/edit': typeof AlbumsAlbumIDEditRoute
  '/albums/$albumID': typeof AlbumsAlbumIDIndexRoute
  '/artists/$artistID': typeof ArtistsArtistIDIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/albums/': typeof AlbumsIndexRoute
  '/artists/': typeof ArtistsIndexRoute
  '/bookmarks/': typeof BookmarksIndexRoute
  '/search/': typeof SearchIndexRoute
  '/settings/': typeof SettingsIndexRoute
  '/stats/': typeof StatsIndexRoute
  '/albums/$albumID/create': typeof AlbumsAlbumIDCreateRoute
  '/albums/$albumID/edit': typeof AlbumsAlbumIDEditRoute
  '/albums/$albumID/': typeof AlbumsAlbumIDIndexRoute
  '/artists/$artistID/': typeof ArtistsArtistIDIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/albums'
    | '/artists'
    | '/bookmarks'
    | '/search'
    | '/settings'
    | '/stats'
    | '/albums/$albumID/create'
    | '/albums/$albumID/edit'
    | '/albums/$albumID'
    | '/artists/$artistID'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/albums'
    | '/artists'
    | '/bookmarks'
    | '/search'
    | '/settings'
    | '/stats'
    | '/albums/$albumID/create'
    | '/albums/$albumID/edit'
    | '/albums/$albumID'
    | '/artists/$artistID'
  id:
    | '__root__'
    | '/'
    | '/albums/'
    | '/artists/'
    | '/bookmarks/'
    | '/search/'
    | '/settings/'
    | '/stats/'
    | '/albums/$albumID/create'
    | '/albums/$albumID/edit'
    | '/albums/$albumID/'
    | '/artists/$artistID/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AlbumsIndexRoute: typeof AlbumsIndexRoute
  ArtistsIndexRoute: typeof ArtistsIndexRoute
  BookmarksIndexRoute: typeof BookmarksIndexRoute
  SearchIndexRoute: typeof SearchIndexRoute
  SettingsIndexRoute: typeof SettingsIndexRoute
  StatsIndexRoute: typeof StatsIndexRoute
  AlbumsAlbumIDCreateRoute: typeof AlbumsAlbumIDCreateRoute
  AlbumsAlbumIDEditRoute: typeof AlbumsAlbumIDEditRoute
  AlbumsAlbumIDIndexRoute: typeof AlbumsAlbumIDIndexRoute
  ArtistsArtistIDIndexRoute: typeof ArtistsArtistIDIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/stats/': {
      id: '/stats/'
      path: '/stats'
      fullPath: '/stats'
      preLoaderRoute: typeof StatsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/': {
      id: '/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/search/': {
      id: '/search/'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/bookmarks/': {
      id: '/bookmarks/'
      path: '/bookmarks'
      fullPath: '/bookmarks'
      preLoaderRoute: typeof BookmarksIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/artists/': {
      id: '/artists/'
      path: '/artists'
      fullPath: '/artists'
      preLoaderRoute: typeof ArtistsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/albums/': {
      id: '/albums/'
      path: '/albums'
      fullPath: '/albums'
      preLoaderRoute: typeof AlbumsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/artists/$artistID/': {
      id: '/artists/$artistID/'
      path: '/artists/$artistID'
      fullPath: '/artists/$artistID'
      preLoaderRoute: typeof ArtistsArtistIDIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/albums/$albumID/': {
      id: '/albums/$albumID/'
      path: '/albums/$albumID'
      fullPath: '/albums/$albumID'
      preLoaderRoute: typeof AlbumsAlbumIDIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/albums/$albumID/edit': {
      id: '/albums/$albumID/edit'
      path: '/albums/$albumID/edit'
      fullPath: '/albums/$albumID/edit'
      preLoaderRoute: typeof AlbumsAlbumIDEditRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/albums/$albumID/create': {
      id: '/albums/$albumID/create'
      path: '/albums/$albumID/create'
      fullPath: '/albums/$albumID/create'
      preLoaderRoute: typeof AlbumsAlbumIDCreateRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AlbumsIndexRoute: AlbumsIndexRoute,
  ArtistsIndexRoute: ArtistsIndexRoute,
  BookmarksIndexRoute: BookmarksIndexRoute,
  SearchIndexRoute: SearchIndexRoute,
  SettingsIndexRoute: SettingsIndexRoute,
  StatsIndexRoute: StatsIndexRoute,
  AlbumsAlbumIDCreateRoute: AlbumsAlbumIDCreateRoute,
  AlbumsAlbumIDEditRoute: AlbumsAlbumIDEditRoute,
  AlbumsAlbumIDIndexRoute: AlbumsAlbumIDIndexRoute,
  ArtistsArtistIDIndexRoute: ArtistsArtistIDIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
